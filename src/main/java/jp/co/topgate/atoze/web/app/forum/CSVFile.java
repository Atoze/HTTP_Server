package jp.co.topgate.atoze.web.app.forum;import java.io.*;import java.util.ArrayList;import java.util.List;/** * CSVファイルの読み書きを行います. * * @author atoze */public class CSVFile {    private boolean endsLineFeed = false;    private final String LINE_FEED = System.getProperty("line.separator");    /**     * CSVファイルに書き込んで保存します.     * 指定されたファイルがない場合は、新しく作成します.     *     * @param text     * @param file     *     * @throws IOException 書き込みエラー     */    public void writeData(String text, File file) throws IOException {        if (!file.exists()) {            file.createNewFile();        }        FileOutputStream output = new FileOutputStream(file, true);        PrintWriter writer = new PrintWriter(output, true);        if (!endsLineFeed) {            text = LINE_FEED + text;        }        writer.print(text);        writer.close();        output.close();    }    /**     * CSVファイルを行ごとに読み込みます.     * 列はutil.List,行はString配列で保管されています.     * 読み込み時に指定した列数に一致しない行は、破棄されます.     *     * @param file      ファイル     * @param columnNum 列数     * @return CSVデータ     *     * @throws IOException 読み込みエラー     */    public List<String[]> readCSV(File file, int columnNum) throws IOException {        List<String[]> list = new ArrayList<>();        if (!file.exists()) {            return list;        }        BufferedInputStream br = new BufferedInputStream(new FileInputStream(file));        String line = readLine(br);        if (line == null) {            return list;        }        while (line != null) {            String[] data = line.split(",", columnNum);            if (data.length == columnNum)                list.add(data);            line = readLine(br);        }        String[] last = list.get(list.size() - 1);        if (last.length > columnNum && last[columnNum - 1].endsWith(LINE_FEED)) {            endsLineFeed = true;        }        return list;    }    /**     * CSVファイルを行ごとに読み込みます.     * 行はutil.List,列はString配列で保管されています.     *     * @param file ファイル     * @return CSVデータ     */    public List<String[]> readCSV(File file) throws IOException {        List<String[]> list = new ArrayList<>();        if (!file.exists()) {            return list;        }        BufferedInputStream br = new BufferedInputStream(new FileInputStream(file));        String line = readLine(br);        if (line == null) {            return list;        }        while (line != null) {            String[] data = line.split(",");            list.add(data);            line = readLine(br);        }        String[] last = list.get(list.size() - 1);        if (last.length > 0 && last[last.length - 1].endsWith(LINE_FEED)) {            endsLineFeed = true;        }        return list;    }    /**     * 読み込まれたストリームデータから、一行(改行コードまで)を読み込んで返します.     * 返される値には改行コードが含まれています.     *     * TODO: 改行コードが '\r' のみのコードに非対応.     *     * @param input 　ストリームデータ     * @return 改行含めた行     */    private String readLine(InputStream input){        int num = 0;        StringBuffer sb = new StringBuffer();        try {            while ((num = input.read()) >= 0) {                sb.append((char) num);                switch ((char) num) {                    case '\r':                    case '\n':                        return sb.toString();                    default:                        break;                }            }        } catch (IOException e) {            throw new RuntimeException(e);        }        if (sb.length() == 0) {            return null;        } else {            return sb.toString();        }    }}